name: üöÄ CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

jobs:
  test:
    name: üß™ Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11, 3.12]

    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üêç Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: üì¶ Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: üîß Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8 black mypy

    - name: üé® Code formatting check
      run: |
        black --check .

    - name: üîç Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: üî¨ Type checking with mypy
      run: |
        mypy main.py --ignore-missing-imports

    - name: üß™ Run tests with pytest
      run: |
        pytest --cov=main --cov-report=xml --cov-report=html

    - name: üìä Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security:
    name: üîí Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üêç Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: üîí Run security scan with bandit
      run: |
        pip install bandit
        bandit -r . -f json -o bandit-report.json || true

    - name: üìã Upload security report
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: bandit-report.json

  performance:
    name: ‚ö° Performance Tests
    runs-on: ubuntu-latest
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üêç Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: üîß Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-benchmark

    - name: ‚ö° Run performance tests
      run: |
        pytest tests/test_performance.py --benchmark-only --benchmark-json=benchmark.json || true

    - name: üìä Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: benchmark.json

  docker:
    name: üê≥ Docker Build
    runs-on: ubuntu-latest
    needs: test
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üê≥ Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: üîë Login to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: üèóÔ∏è Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: ${{ github.event_name != 'pull_request' }}
        tags: |
          mppt24/agi-absoluta:latest
          mppt24/agi-absoluta:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    name: üöÄ Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, security, docker]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üöÄ Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here

  deploy-production:
    name: üåü Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, security, docker]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üåü Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here

  release:
    name: üì¶ Create Release
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'release'
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üêç Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: üîß Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: üì¶ Build package
      run: |
        python -m build

    - name: üìã Generate changelog
      run: |
        echo "## Changes in this release" > release-notes.md
        git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> release-notes.md

    - name: üì§ Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./dist/
        asset_name: mppt24-agi-absoluta-${{ github.event.release.tag_name }}.tar.gz
        asset_content_type: application/gzip

  notify:
    name: üì¢ Notifications
    runs-on: ubuntu-latest
    needs: [test, security, performance]
    if: always()
    steps:
    - name: üìß Send email notification
      if: failure()
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ secrets.EMAIL_USERNAME }}
        password: ${{ secrets.EMAIL_PASSWORD }}
        subject: "‚ùå CI/CD Pipeline Failed - mppt24 AGI ABSOLUTA"
        body: |
          The CI/CD pipeline has failed for commit ${{ github.sha }}.
          
          Repository: ${{ github.repository }}
          Branch: ${{ github.ref }}
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}
          
          Please check the GitHub Actions logs for more details.
        to: mppt24@gmail.com
        from: noreply@mppt24.com

    - name: üí¨ Discord notification
      if: always()
      uses: Ilshidur/action-discord@master
      env:
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      with:
        args: |
          ü§ñ **mppt24 AGI ABSOLUTA CI/CD Update**
          
          **Status**: ${{ job.status == 'success' && '‚úÖ Success' || '‚ùå Failed' }}
          **Branch**: `${{ github.ref }}`
          **Commit**: `${{ github.sha }}`
          **Author**: ${{ github.actor }}
          
          [View Details](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

  metrics:
    name: üìä Collect Metrics
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üìä Collect repository metrics
      run: |
        echo "Collecting metrics..."
        echo "Repository: ${{ github.repository }}"
        echo "Stars: $(curl -s https://api.github.com/repos/${{ github.repository }} | jq .stargazers_count)"
        echo "Forks: $(curl -s https://api.github.com/repos/${{ github.repository }} | jq .forks_count)"
        echo "Issues: $(curl -s https://api.github.com/repos/${{ github.repository }}/issues | jq length)"
        echo "Contributors: $(curl -s https://api.github.com/repos/${{ github.repository }}/contributors | jq length)"

    - name: üìà Update project metrics
      run: |
        # Add commands to update project dashboard or metrics system
        echo "Metrics updated successfully"

